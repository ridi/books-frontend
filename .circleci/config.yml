version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.9
  slack: circleci/slack@3.4.2
commands:
  install:
    parameters:
      key:
        type: string
        default: books-frontend
    steps:
      - restore_cache:
          keys:
            - <<parameters.key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - <<parameters.key>>-{{ .Branch }}-
            - <<parameters.key>>-
      - run:
          name: Install yarn packages
          command: yarn install --frozen-lockfile
      - save_cache:
          key: <<parameters.key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: ~/.cache/yarn
  notify:
    parameters:
      color:
        type: string
        default: good
      channel:
        type: string
        default: deploy-store
      rollback:
        type: boolean
        default: false
    steps:
      - run:
          command: |
            export TITLE="`git show -s --format=%s -n1 $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
            echo "export TITLE=$'$(echo "$TITLE")'" >> $BASH_ENV
      - unless:
          condition: <<parameters.rollback>>
          steps:
            - run:
                command: |
                  export LAST_RELEASE=$([ "$CIRCLE_BRANCH" = master ] && echo "`git rev-parse --abbrev-ref HEAD`^1" || echo "`git for-each-ref --count=1 --sort=-committerdate --format='%(objectname)' refs/remotes/origin/release/`")
                  export MESSAGE="`git show -s --format=%b $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
                  export MESSAGE="$MESSAGE\n\n$(git log $LAST_RELEASE..$CIRCLE_SHA1 --no-merges --pretty=format:'* `%h` %s')"
                  echo "export MESSAGE=$'$(echo "$MESSAGE")'" >> $BASH_ENV
      - when:
          condition: <<parameters.rollback>>
          steps:
            - run:
                command: |
                  export MESSAGE="[Rollback]: `git show -s --format=%b $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
                  echo "export MESSAGE=$'$(echo "$MESSAGE")'" >> $BASH_ENV
      - slack/notify:
          color: << parameters.color >>
          title: $TITLE
          title_link: https://github.com/ridi/books-frontend/commit/$CIRCLE_SHA1
          message: $MESSAGE
          channel: << parameters.channel >>
          include_project_field: false
          include_job_number_field: false
jobs:
  build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      environment:
        type: string
        default: production
    environment:
      ENVIRONMENT: << parameters.environment >>
    steps:
      - checkout
      - install
      - run:
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build/
  deploy:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
      s3-bucket:
        type: env_var_name
        default: PROD_S3_BUCKET
      stage:
        type: string
        default: production
      after-scripts:
        type: steps
        default: []
    environment:
      ENVIRONMENT: << parameters.stage >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-s3/sync:
          from: static
          to: s3://${<< parameters.s3-bucket >>}/static/
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          arguments: |
            --exclude "*.map" \
            --cache-control public,max-age=31536000
      - aws-s3/sync:
          from: build
          to: s3://${<< parameters.s3-bucket >>}/_next/
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          arguments: |
            --exclude "*.map"
      - install
      - run:
          command: yarn deploy -s << parameters.stage >>
      - run:
          command:
            yarn serverless deploy list -s << parameters.stage >> | awk '/Timestamp/ {print $NF}' | tail -n 1 > .deploytimestamp
      - persist_to_workspace:
          root: .
          paths:
            - .deploytimestamp
      - steps: << parameters.after-scripts >>
  profile-live:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      url:
        type: string
        default: 'https://ridibooks.com/'
    steps:
      - checkout
      - install
      - run:
          name: Run profiler
          command: |
            mkdir /tmp/traces
            cd /tmp/traces
            node ~/books-frontend/server/profile/live.js '<< parameters.url >>'
      - store_artifacts:
          path: /tmp/traces
  rollback:
    docker:
      - image: circleci/node:lts
    parameters:
      after-scripts:
        type: steps
        default: []
    steps:
      - attach_workspace:
          at: .
      - run:
          command: |
            curl -o- -L https://slss.io/install | bash
            export PATH="$HOME/.serverless/bin:$PATH"
      - run:
          command: serverless rollback -t `cat .deploytimestamp`
      - steps: << parameters.after-scripts >>
workflows:
  version: 2
  deploy-dev:
    jobs:
      - build:
          name: build-dev
          filters:
            branches:
              only: master
          environment: development
      - deploy:
          name: deploy-dev
          requires:
            - build-dev
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
          s3-bucket: DEV_S3_BUCKET
          stage: development
          after-scripts:
            - notify:
                channel: deploy-store-dev
      - rollback-approval:
          type: approval
          requires:
            - deploy-dev
      - rollback:
          requires:
            - rollback-approval
          after-scripts:
            - notify:
                color: '#805b24'
                channel: deploy-store-dev
                rollback: true
  deploy-prod:
    jobs:
      - build:
          name: build-prod
          filters:
            branches:
              only:
                - /release\/.+/
      - deploy:
          name: deploy-prod
          requires:
            - build-prod
          after-scripts:
            - notify
      - profile-live:
          name: profile-live-prod
          requires:
            - deploy-prod
          url: 'https://ridibooks.com/'
      - rollback-approval:
          type: approval
          requires:
            - deploy-prod
      - rollback:
          requires:
            - rollback-approval
          after-scripts:
            - notify:
                color: '#805b24'
                rollback: true
