version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.9
  slack: circleci/slack@3.4.2
commands:
  install:
    parameters:
      key:
        type: string
        default: books-frontend
    steps:
      - restore_cache:
          keys:
            - <<parameters.key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - <<parameters.key>>-{{ .Branch }}-
            - <<parameters.key>>-
      - run:
          name: Install yarn packages
          command: yarn install --production=false --frozen-lockfile
      - save_cache:
          key: <<parameters.key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: ~/.cache/yarn
  serverless_setup:
    parameters:
      aws-access-key-id:
        type: env_var_name
      aws-secret-access-key:
        type: env_var_name
    steps:
      - run:
          command: |
            npx js-yaml serverless.yml | jq -r '.plugins[]' | xargs yarn add serverless
      - run:
          command: |
            echo "export AWS_ACCESS_KEY_ID=${<< parameters.aws-access-key-id >>}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${<< parameters.aws-secret-access-key >>}" >> $BASH_ENV
  notify:
    parameters:
      color:
        type: string
        default: good
      channel:
        type: string
        default: deploy-books
      prefix:
        type: string
        default: ''
      rollback:
        type: boolean
        default: false
    steps:
      - run:
          command: |
            export TITLE="`git show -s --format=%s -n1 $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
            echo "export TITLE='$(echo "$TITLE")'" >> $BASH_ENV
      - run:
          command: |
            export COMMON_ANCESTOR=`git merge-base master HEAD`
            export LAST_RELEASE=$([ "$CIRCLE_BRANCH" = master ] && echo "HEAD^1" || echo "`git for-each-ref --count=2 --sort=committerdate --format='%(objectname)' refs/remotes/origin/release/ | tail -n1`")
            export MESSAGE="`git show -s --format=%b $CIRCLE_SHA1 | sed "s/'/\\\\\'/g"`"
            [ $COMMON_ANCESTOR = $CIRCLE_SHA1 ] && export MESSAGE="$(git log $LAST_RELEASE..$CIRCLE_SHA1 --no-merges --pretty=format:'* `%h` %s')"
            echo "export MESSAGE='$(echo "$MESSAGE")'" >> $BASH_ENV
      - when:
          condition: << parameters.prefix >>
          steps:
            - run:
                command: |
                  echo "export TITLE='<< parameters.prefix >> $(echo "$TITLE")'" >> $BASH_ENV
      - when:
          condition: <<parameters.rollback>>
          steps:
            - run:
                command: |
                  echo "export TITLE='[Rollback]: $(echo "$TITLE")'" >> $BASH_ENV
      - slack/notify:
          color: << parameters.color >>
          title: $TITLE
          title_link: https://github.com/ridi/books-frontend/commit/$CIRCLE_SHA1
          message: $MESSAGE
          channel: << parameters.channel >>
          include_project_field: false
          include_job_number_field: false
jobs:
  build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      stage:
        type: string
        default: production
      assetPrefix:
        type: string
        default: https://books.ridicdn.net
    environment:
      STAGE: << parameters.stage >>
      ASSET_PREFIX: << parameters.assetPrefix >>
    steps:
      - checkout
      - install
      - run:
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build/
  deploy-s3:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
      s3-bucket:
        type: string
        default: ridi-books-prod
    steps:
      - attach_workspace:
          at: .
      - aws-s3/sync:
          from: build/static/
          to: s3://<< parameters.s3-bucket >>/_next/static/
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          arguments: |
            --cache-control public,max-age=31536000,immutable \
            --exclude "*.map"
  deploy:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
      s3-bucket:
        type: string
        default: ridi-books-prod
      stage:
        type: string
        default: production
      assetPrefix:
        type: string
        default: https://books.ridicdn.net
    environment:
      STAGE: << parameters.stage >>
      S3_BUCKET: << parameters.s3-bucket >>
      ASSET_PREFIX: << parameters.assetPrefix >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - serverless_setup:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
      - run:
          name: Get last deployment timestamp
          command:
            yarn serverless deploy list -s << parameters.stage >> | awk '/Timestamp/ {print $NF}' | tail -n 1 > .lastdeploytimestamp
      - run:
          name: Deploy lambda function
          command: yarn deploy -s << parameters.stage >>
          when: always
      - run:
          name: Deploy full serverless app
          command: yarn serverless deploy -v -s << parameters.stage >>
          when: on_fail
      - persist_to_workspace:
          root: .
          paths:
            - .lastdeploytimestamp
  profile-live:
    docker:
      - image: circleci/node:lts-browsers
    working_directory: ~/books-frontend
    parameters:
      url:
        type: string
        default: https://ridibooks.com/
    steps:
      - checkout
      - install
      - run:
          name: Run profiler
          command: |
            mkdir /tmp/traces
            cd /tmp/traces
            node ~/books-frontend/profile/live.js '<< parameters.url >>'
      - store_artifacts:
          path: /tmp/traces
  rollback:
    docker:
      - image: circleci/node:lts
    working_directory: ~/books-frontend
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - attach_workspace:
          at: .
      - serverless_setup:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
      - run:
          command: |
            yarn serverless rollback -t `cat .lastdeploytimestamp`
workflows:
  version: 2
  deploy-dev:
    jobs:
      - build:
          name: build-dev
          filters:
            branches:
              only: master
          stage: development
          assetPrefix: https://books.ridi.io
      - deploy-s3:
          name: deploy-dev/s3
          requires:
            - build-dev
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
          s3-bucket: ridi-books-dev
      - deploy:
          name: deploy-stage
          requires:
            - build-dev
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
          s3-bucket: ridi-books-dev
          stage: staging
          assetPrefix: https://books.ridi.io
      - deploy:
          name: deploy-dev
          requires:
            - build-dev
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
          s3-bucket: ridi-books-dev
          stage: development
          assetPrefix: https://books.ridi.io
          post-steps:
            - notify:
                channel: deploy-books-dev
                prefix: '[DEV]'
      - rollback-approval:
          type: approval
          requires:
            - deploy-dev
      - rollback:
          name: rollback-dev
          requires:
            - rollback-approval
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
          post-steps:
            - notify:
                color: '#805b24'
                channel: deploy-books-dev
                rollback: true
  deploy-staging:
    jobs:
      - build:
          name: build-staging
          filters:
            branches:
              only: master
          stage: staging
          assetPrefix: https://books-staging.ridibooks.com
      - deploy-s3:
          name: deploy-staging/s3
          requires:
            - build-staging
      - deploy:
          name: deploy-staging
          requires:
            - build-staging
          stage: staging
  deploy-prerelease:
    jobs:
      - build:
          name: build-prod
          filters:
            branches:
              only: master
      - deploy-s3:
          name: deploy-prod/s3
          requires:
            - build-prod
      - deploy:
          name: deploy-prerelease
          requires:
            - build-prod
          stage: prerelease
          post-steps:
            - notify:
                prefix: '[PRE-RELEASE]'
      - rollback-approval:
          type: approval
          requires:
            - deploy-prerelease
      - rollback:
          name: rollback-prerelease
          requires:
            - rollback-approval
          post-steps:
            - notify:
                color: '#805b24'
                rollback: true
  deploy-prod:
    jobs:
      - build:
          name: build-prod
          filters:
            branches:
              only:
                - /release\/.+/
      - deploy-s3:
          name: deploy-prod/s3
          requires:
            - build-prod
      - slack/approval-notification:
          channel: deploy-books
          requires:
            - deploy-prod/s3
      - deploy-approval:
          type: approval
          requires:
            - deploy-prod/s3
      - deploy:
          name: deploy-prod
          requires:
            - deploy-approval
          post-steps:
            - notify
      - profile-live:
          name: profile-live-prod
          requires:
            - deploy-prod
          url: https://ridibooks.com/
      - rollback-approval:
          type: approval
          requires:
            - deploy-prod
      - rollback:
          name: rollback-prod
          requires:
            - rollback-approval
          post-steps:
            - notify:
                color: '#805b24'
                rollback: true
